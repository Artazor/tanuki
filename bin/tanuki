#!/usr/bin/env ruby
module Tanuki

  module Utility

    class << self

      def create(name)
        unless name
          puts "To use this command: `create <name>'"
          return
        end
        require 'fileutils'
        project_dir = File.expand_path(name)
        if File.exists? project_dir
          puts "Directory `#{name}' already exists!"
          return
        end
        version unless @in_repl
        puts "\n creating #{name = name.downcase}"
        FileUtils.mkdir project_dir
        file_source = File.expand_path(File.join('..', '..'), __FILE__)
        puts " creating #{File.join(name, 'app', 'tanuki')}"
        FileUtils.mkdir_p File.join(project_dir, 'app', 'tanuki')
        FileUtils.cp_r File.join(file_source, 'app', 'tanuki'), File.join(project_dir, 'app')
        puts " creating #{File.join(name, 'app/user')}"
        FileUtils.mkdir_p File.join(project_dir, 'app', 'user')
        FileUtils.cp_r File.join(file_source, 'app', 'user'), File.join(project_dir, 'app')
        puts " creating #{File.join(name, 'cache')}"
        FileUtils.mkdir(File.join(project_dir, 'cache'))
        puts " creating #{File.join(name, 'config')}"
        FileUtils.mkdir(File.join(project_dir, 'config'))
        FileUtils.cp_r File.join(file_source, 'config'), project_dir
        puts " creating #{File.join(name, 'schema')}"
        FileUtils.mkdir(File.join(project_dir, 'schema'))
        FileUtils.cp_r File.join(file_source, 'schema'), project_dir
        puts " creating #{File.join(name, 'main')}"
        File.open(File.join(project_dir, 'main.rb'), 'w') {|file| file.write "require 'tanuki'\nTanuki.run :development" }
      end

      def generate(cwd)
        version unless @in_repl
        unless cwd
          cwd = File.expand_path('.')
          puts "Working directory is: #{cwd}\nTo specify another: `generate <path>'"
        end
        unless File.directory? File.join(cwd, 'config')
          puts "Directory `config' not found. Are you sure there's a Tanuki here?"
          return
        end
        require 'yaml'
        require 'fileutils'
        require File.join('tanuki', 'extensions', 'object_extensions')
        require File.join('tanuki', 'configurator')
        require File.join('tanuki', 'context')
        require File.join('tanuki', 'loader')
        require File.join('tanuki', 'object_behavior')
        require File.join('tanuki', 'template_compiler')
        # begin models generator
        puts "\n configuring environment"
        Loader.context = ctx = Context
        Configurator.new(Context, cwd).load_config(:common)
        Dir.entries(ctx.schema_root)[2..-1].each do |namespace_path|
          namespace = namespace_path.capitalize
          Dir.glob(File.join(ctx.schema_root, namespace_path, 'models', '*.yml')) do |file_path|
            model_name = File.basename(file_path, '.yml').split('_').map {|s| s.capitalize }.join
            puts " generating for model: #{namespace}.#{model_name}"
            meta_model = Tanuki_MetaModel.new(namespace, model_name, YAML.load_file(file_path))
            generated = []
            skipped = []
            failed = []
            {
              :model => false,
              :model_base => true,
              :manager => false,
              :manager_base => true
            }.each do |class_type, overwrite|
              class_name = meta_model.class_name_for class_type
              path = Tanuki::Loader.class_path(class_name)
              if overwrite || !(File.exists? path)
                begin
                  dirname = File.dirname(path)
                  FileUtils.mkdir_p dirname unless File.directory? dirname
                  File.open path, 'w' do |file|
                    writer = proc {|out| file.print out.to_s }
                    Loader.run_template({}, meta_model, class_type).call(writer, ctx)
                  end
                  generated << class_name
                rescue
                  failed << class_name
                end
              else
                skipped << class_name
              end
            end
            [:generated, :skipped, :failed].each do |ary_name|
              ary = eval ary_name.to_s
              puts %{ #{ary_name}:\n - #{ary.join "\n - "}} unless ary.empty?
            end
          end
        end
        # end models generator
        # TODO: refactor!!
      end

      def execute(args)
        case args[0]
        when 'create' then create(args[1])
        when 'exit' then @in_repl ? (return false) : help
        when 'generate' then generate(args[1])
        when 'help' then help
        when 'version' then version
        when nil then start_repl unless @in_repl
        else help
        end
        true
      end

      def help
        version unless @in_repl
        puts "\nbasic commands:\n"
        {
          'help'    => 'show help (this text)',
          'create'  => 'create a new app with the given name',
          'version' => 'show framework version'
        }.each_pair {|k, v| puts ' %-7s   %s' % [k, v] }
      end

      def init
        @in_repl = false
        execute ARGV
      end

      def start_repl
        @in_repl = true
        version
        print 'tanuki>'
        print "\ntanuki>" while gets && execute($_.chomp.scan /(?<=")\w[\w\s]*(?=")|\w+/)
      end

      def version
        begin
          require File.join('tanuki', 'version')
        rescue LoadError
          $:.unshift File.expand_path(File.join('..', '..', 'lib'), __FILE__)
          require File.join('tanuki', 'version')
        end
        puts "Tanuki version #{VERSION}"
      end

    end # end class << self

  end # end Utility

end # end Tanuki

Tanuki::Utility.init if File.basename(__FILE__) == File.basename($0)